#-----CLASS v2.6.3 (branch: master, hash: de7d9d7e54874dd7c841ee6896cf39ded32e2bae)-----

# MONTEPYTHON 2.2.6
#
#--------------------------------------------------------------------------------------
# EXPERIMENTS TO TEST -----------------------------------------------------------------
#--------------------------------------------------------------------------------------
# To see all the available ones, please look in the
# montepython/likelihoods folder. Every folder there is a valid likelihood to
# test.

#data.experiments=['Pantheon','celia1']
data.experiments=['bao']
#data.experiments=['bao_boss','cosmic_clocks_BC03_all']
#data.experiments=['Planck_highl','Planck_lowl','Planck_lensing']
#data.experiments=['wmap','spt']

#--------------------------------------------------------------------------------------
# SETTINGS FOR OVERSAMPLING (taken from base2015.param) -------------------------------
#--------------------------------------------------------------------------------------

# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#data.over_sampling=[1, 2]

#--------------------------------------------------------------------------------------
# NOTAS I M P O R T A N T E S ---------------------------------------------------------
#--------------------------------------------------------------------------------------

# Omega_x (con mayúscula) se refiere al parámetro de densidad

# omega_x (con minúscula) se refiere al parámetro -físico- de densidad (Omega_x * h^2) 

# OJO tanto el valor de -mean- como -min-, -max- Y -1-sigma- son afectados por el cambio en 
# el valor -scale-, revisar las tablas de PLANCK y comparar el error con los valores 
# mostrados en cualquier .param de cajón, por ejemplo base2015.param 

# para marginalizar un prior (ya sea cosmo o nuisance) es necesario que 1-sigma tenga 
# un valor igual a cero

#--------------------------------------------------------------------------------------
# COSMOLOGICAL PARAMETERS -------------------------------------------------------------
#--------------------------------------------------------------------------------------

# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'
#data.parameters[class name]       = [   mean,   min,       max,1-sigma, scale,    'role']
#--------------------------------------------------------------------------------------

#data.parameters['tau_reio']       = [  0.085,    -1,        -1, 0.0044,     1,   'cosmo']
#data.parameters['T_cmb']          = [    2.0,	None,      None,  0.015,     1,   'cosmo']
#data.parameters['h']              = [  0.703,    -1,        -1, 0.0065,     1,   'cosmo']

data.parameters['H0']              = [  67.4,   55.0,     85.0,   0.5,     1,   'cosmo']
#data.parameters['Omega_m']         = [   0.3,    0.0,      1.0,  0.04,     1,   'cosmo']
#data.parameters['omega_b']         = [  2.222,    0.5,     None,  0.023,  0.01,   'cosmo']
#data.parameters['omega_cdm']       = [ 0.1197,   0.00,     None, 0.0022,     1,   'cosmo']

#data.parameters['A_s']             = [  2.198,   None,     None,  0.080, 1.e-9,   'cosmo']
#data.parameters['n_s']             = [ 0.9655,   None,     None, 0.0062,     1,   'cosmo']
#data.parameters['tau_reio']        = [  0.078,   None,     None,  0.019,     1,   'cosmo']

#data.parameters['A_s']             = [  2.198,   None,     None,      0, 1.e-9,   'cosmo']
#data.parameters['n_s']             = [ 0.9655,   None,     None,      0,     1,   'cosmo']
#data.parameters['tau_reio']        = [  0.078,   None,     None,      0,     1,   'cosmo']
#--------------------------------------------------------------------------------------
# EQUATION-OF-STATE PARAMETERS --------------------------------------------------------
#--------------------------------------------------------------------------------------

#data.parameters['muparam'] 	   = [1.1e-4,     1.e-7,      1.e-4,    1.0,     1,   'cosmo']
#data.parameters['lambdaparam'] 	   = [1.1e-9,     1.e-14,     1.e-9,    1.0,     1,   'cosmo']
data.parameters['k1param'] 	           = [1.01,     0.9,      10.0,    0.00001,     1.e+4,   'cosmo']
data.parameters['k2param'] 	           = [1.01,     0.9,      10.0,    0.00000000001,     1.e+9,   'cosmo']
data.parameters['Qparam']         = [4.0,         None,       None,      0,     1,   'cosmo']
data.parameters['Bparam']         = [20.0,        None,       None,      0,     1,   'cosmo']

#--------------------------------------------------------------------------------------
# NUISANCE PARAMETERS -----------------------------------------------------------------
#--------------------------------------------------------------------------------------
#
#
#data.parameters['M']       	   = [-19.09,    None,     None,  0,     1, 'nuisance']
#
#
#--------------------------------------------------------------------------------------
# DERIVED PARAMETERS ------------------------------------------------------------------
#--------------------------------------------------------------------------------------
#data.parameters['Omega_fld'] 	   = [ 0.685,    None,     None,  0,     1, 'derived']
#data.parameters['z_reio']         = [1     ,      -1,       -1,  0,     1, 'derived']
#data.parameters['YHe']            = [1     ,    None,     None,  0,     1, 'derived']
#data.parameters['H0']             = [1    ,  None,   None,      0,     1, 'derived']
#data.parameters['Omega_m']        = [1     ,    None,     None,  0,     1, 'derived']
#data.parameters['Omega_Lambda']   = [0.685,  None,   None,      0,     1, 'derived']
#data.parameters['sigma8']         = [0     ,    None,     None,  0,     1, 'derived']

#--------------------------------------------------------------------------------------
# CLASS ARGUMENTS (SPECIFIC) ----------------------------------------------------------
#--------------------------------------------------------------------------------------
data.cosmo_arguments['Omega_fld']  =  0.61
data.cosmo_arguments['use_ppf']    =  'yes' 
#data.cosmo_arguments['output'] = 'mPk,tCl'
#data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'

#--------------------------------------------------------------------------------------
# MCMC PARAMETERS ---------------------------------------------------------------------
#--------------------------------------------------------------------------------------
# Number of steps taken, by default (overwritten by the -N command)
#data.N=100
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step=5

#
#
#
#
#
#
#
#


#-----Likelihood-bao-----
bao.file = 'bao_2012.txt'
bao.data_directory = '/home/claudio/physics/01_montepython/montepython3-1/data'
bao.rs_rescale = 1.02640313172


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'Omega_fld': 0.61, 'use_ppf': 'yes'})


#--------Default-Configuration------
data.path['cosmo']	= '/home/claudio/physics/00_class/class-celia/EoS'
data.path['root']	= '/home/claudio/physics/01_montepython/montepython3-1'
data.path['data']	= '/home/claudio/physics/01_montepython/montepython3-1/data'
data.path['clik']	= '/home/claudio/physics/30_data/planck_likelihood_2015/plc-2.0'
data.path['MontePython']	= '/home/claudio/physics/01_montepython/montepython3-1/montepython'
